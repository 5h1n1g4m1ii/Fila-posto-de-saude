#include <stdio.h>
#include <stdlib.h>

// Estrutura para armazenar os dados de uma pessoa
typedef struct {
    int id;
    char sexo;
    int idade;
    char gestante;
    char lactante;
    char necessidadeEspecial;
    int prioridade;
} Pessoa;

// Estrutura para representar um nó da fila
typedef struct No {
    Pessoa pessoa;
    struct No* proximo;
} No;

// Estrutura para representar a fila (deque)
typedef struct {
    No* frente;
    No* tras;
} Deque;

// Função para criar um nó
No* criarNo(Pessoa pessoa) {
    No* novoNo = (No*)malloc(sizeof(No));
    novoNo->pessoa = pessoa;
    novoNo->proximo = NULL;
    return novoNo;
}

// Função para criar a fila vazia
Deque* criarDeque() {
    Deque* deque = (Deque*)malloc(sizeof(Deque));
    deque->frente = NULL;
    deque->tras = NULL;
    return deque;
}

// Função para verificar se a fila está vazia
int estaVazio(Deque* deque) {
    return deque->frente == NULL;
}

// Função para inserir um elemento no início da fila
void inserirInicio(Deque* deque, Pessoa pessoa) {
    No* novoNo = criarNo(pessoa);
    if (estaVazio(deque)) {
        deque->tras = novoNo;
    } else {
        novoNo->proximo = deque->frente;
    }
    deque->frente = novoNo;
}

// Função para inserir um elemento no final da fila
void inserirFim(Deque* deque, Pessoa pessoa) {
    No* novoNo = criarNo(pessoa);
    if (estaVazio(deque)) {
        deque->frente = novoNo;
    } else {
        deque->tras->proximo = novoNo;
    }
    deque->tras = novoNo;
}

// Função para remover o elemento do início da fila
void removerInicio(Deque* deque) {
    if (estaVazio(deque)) {
        printf("Fila vazia. Nenhum elemento removido.\n");
    } else {
        No* noRemovido = deque->frente;
        deque->frente = deque->frente->proximo;
        free(noRemovido);
        if (deque->frente == NULL) {
            deque->tras = NULL;
        }
    }
}

// Função para remover o elemento do final da fila
void removerFim(Deque* deque) {
    if (estaVazio(deque)) {
        printf("Fila vazia. Nenhum elemento removido.\n");
    } else {
        No* noAnterior = NULL;
        No* noAtual = deque->frente;
        while (noAtual != deque->tras) {
            noAnterior = noAtual;
            noAtual = noAtual->proximo;
        }
        free(noAtual);
        if (noAnterior == NULL) {
            deque->frente = NULL;
            deque->tras = NULL;
        } else {
            noAnterior->proximo = NULL;
            deque->tras = noAnterior;
        }
    }
}
int obterPrioridade(Pessoa pessoa) {
    if (pessoa.idade >= 60)
        return 1;
    else if (pessoa.necessidadeEspecial == 's')
        return 2;
    else if (pessoa.gestante == 's' || pessoa.lactante == 's')
        return 3;
    else
        return 0;
}

// Função para exibir os dados de uma pessoa
void exibirPessoa(Pessoa pessoa) {
    printf("ID: %d\n", pessoa.id);
    printf("Sexo: %c\n", pessoa.sexo);
    printf("Idade: %d\n", pessoa.idade);
    printf("Gestante: %c\n", pessoa.gestante);
    printf("Lactante: %c\n", pessoa.lactante);
    printf("Necessidade Especial: %c\n", pessoa.necessidadeEspecial);
    printf("Prioridade: %d\n", pessoa.prioridade);
    printf("-----------------------------\n");
}

int main() {
    Deque* filaAtendimento = criarDeque();
    Deque* filaNaoAtendidos = criarDeque();
    int pessoasAtendidas = 0;

    // Simulando a chegada de grupos de 10 pessoas
    for (int i = 1; i <= 10; i++) {
        // Gerando dados aleatórios para cada pessoa do grupo
        for (int j = 0; j < i; j++) {
            Pessoa pessoa;
            pessoa.id = (i - 1) * 10 + j + 1;
            pessoa.sexo = (rand() % 2 == 0) ? 'M' : 'F';
            pessoa.idade = rand() % 90 + 10;
            pessoa.gestante = (rand() % 2 == 0) ? 's' : 'n';
            pessoa.lactante = (rand() % 2 == 0) ? 's' : 'n';
            pessoa.necessidadeEspecial = (rand() % 2 == 0) ? 's' : 'n';
            pessoa.prioridade = obterPrioridade(pessoa);

            // Inserindo a pessoa na fila de atendimento
            inserirFim(filaAtendimento, pessoa);
        }

        // Atendendo as pessoas do grupo
        int pessoasGrupo = i;
        int atendidosGrupo = pessoasGrupo * (pessoasGrupo + 1) / 2;
        pessoasAtendidas += atendidosGrupo;

        // Exibindo as pessoas atendidas
        printf("Grupo %d:\n", i);
        for (int k = 0; k < atendidosGrupo; k++) {
            Pessoa pessoa = filaAtendimento->frente->pessoa;
            exibirPessoa(pessoa);
            removerInicio(filaAtendimento);
        }
        printf("------------------------------\n");

        // Movendo as pessoas não atendidas para a fila de não atendidos
        while (!estaVazio(filaAtendimento)) {
            Pessoa pessoa = filaAtendimento->frente->pessoa;
            exibirPessoa(pessoa);
            removerInicio(filaAtendimento);
            inserirFim(filaNaoAtendidos, pessoa);
        }
        printf("==============================\n");
    }
    // Exibindo as pessoas não atendidas
    printf("Pessoas não atendidas:\n");
    while (!estaVazio(filaNaoAtendidos)) {
        Pessoa pessoa = filaNaoAtendidos->frente->pessoa;
        exibirPessoa(pessoa);
        removerInicio(filaNaoAtendidos);
    }

    // Liberando a memória alocada
    free(filaAtendimento);
    free(filaNaoAtendidos);

    // Exibindo o total de pessoas atendidas
    printf("Total de pessoas atendidas: %d\n", pessoasAtendidas);

    return 0;
}
